import kagglehub

# Download latest version
path = kagglehub.dataset_download("dmitrybabko/speech-emotion-recognition-en")
data_dir = path
print("Path to dataset files:", path)

pip install librosa pandas numpy


import os
import librosa
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


emotion_ls = {
    '01': 'neutral',
    '02': 'calm',
    '03': 'happy',
    '04': 'sad',
    '05': 'angry',
    '06': 'fearful',
    '07': 'disgust',
    '08': 'surprised'
}

def extract_emotion(filename):
    parts = filename.split('-')
    if len(parts) > 2:
        emotion_code = parts[2]
        return emotion_ls.get(emotion_code)
    return None # Return None for files that don't match the pattern

def extract_features(file_path):
    y, sr = librosa.load(file_path, duration=3, offset=0.5)
    mfccs = np.mean(librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40).T, axis=0)
    return mfccs


features = []

for root, dirs, files in os.walk(data_dir):
    for file in files:
        if file.endswith(".wav"):
            file_path = os.path.join(root, file)
            emotion = extract_emotion(file)
            if emotion is not None: # Only process files where emotion was successfully extracted // Could use that warning library here 
                mfccs = extract_features(file_path)
                features.append([mfccs, emotion])

df = pd.DataFrame(features, columns=['feature', 'emotion'])
mfcc_df = pd.DataFrame(df['feature'].tolist())
mfcc_df['emotion'] = df['emotion']
print(mfcc_df.head())

from sklearn.model_selection import train_test_split

X = mfcc_df.drop('emotion', axis=1)  # features
y = mfcc_df['emotion']               # labels

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)


from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


from sklearn.svm import SVC

model = SVC(kernel='linear', C=1.0)  
model.fit(X_train, y_train)


from sklearn.metrics import classification_report, confusion_matrix

y_pred = model.predict(X_test)

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))


#To get audio files from user
from google.colab import files

uploaded = files.upload()
user_file = list(uploaded.keys())[0]

user_features = extract_features(user_file)
user_features_scaled = scaler.transform([user_features])
predicted_emotion = model.predict(user_features_scaled)

print("Predicted emotion:", predicted_emotion[0])


#For testing -- Redundant. 
new_file = "path_to_new_audio.wav"
new_features = extract_features(new_file)
new_features = scaler.transform([new_features])  # scale like training data
predicted_emotion = model.predict(new_features)
print("Predicted emotion:", predicted_emotion[0])
